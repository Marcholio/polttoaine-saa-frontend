{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","map","useRef","useEffect","current","Map","target","view","View","center","fromLonLat","zoom","layers","TileLayer","source","OSM","useState","loading","stations","selectedFuel","state","setState","axios","method","url","process","headers","then","res","data","getLayers","forEach","layer","i","removeLayer","heatmapSource","VectorSource","format","GeoJSON","loader","addFeatures","station","feature","Feature","Point","coordinates","setProperties","value","prices","textSource","setStyle","Style","text","Text","font","fill","Fill","color","stroke","Stroke","toString","overflow","addLayer","HeatMapLayer","weight","get","blur","radius","VectorLayer","updateSelectedFuel","fuel","s","className","id","Button","variant","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qaA+KeA,EAvJH,WACV,IAAMC,EAAMC,iBAAO,IAEnBC,qBAAU,WACRF,EAAIG,QAAU,IAAIC,IAAI,CACpBC,OAAQ,MACRC,KAAM,IAAIC,IAAK,CACbC,OAAQC,YAAW,CAAC,MAAO,OAC3BC,KAAM,OAERC,OAAQ,CACN,IAAIC,IAAU,CACZC,OAAQ,IAAIC,WAIjB,IAhBa,MAkBUC,mBAIvB,CACDC,SAAS,EACTC,SAAU,GACVC,aAAc,SAzBA,mBAkBTC,EAlBS,KAkBFC,EAlBE,KA6BhBlB,qBAAU,WACRmB,IAAM,CACJC,OAAQ,MACRC,IAAI,GAAD,OAAKC,gEAAL,aACHC,QAAS,CACP,YAAaD,8CAEdE,MAAK,SAACC,GAAD,OACNP,GAAS,SAACD,GAAD,mBAAC,eAAgBA,GAAjB,IAAwBH,SAAS,EAAOC,SAAUU,EAAIC,eAEhE,IAEH1B,qBAAU,WACR,IAAKiB,EAAMH,QAAS,CAClBhB,EAAIG,QAAQ0B,YAAYC,SAAQ,SAACC,EAAOC,GAE5B,IAANA,GACFhC,EAAIG,QAAQ8B,YAAYF,MAI5B,IAAMG,EAAgB,IAAIC,IAAa,CACrCC,OAAQ,IAAIC,IACZC,OAAQ,WACNJ,EAAcK,YACZpB,EAAMF,SAASjB,KAAI,SAACwC,GAClB,IAAMC,EAAU,IAAIC,IAClB,IAAIC,IAAMlC,YAAW+B,EAAQI,eAK/B,OAHAH,EAAQI,cAAc,CACpBC,MAAON,EAAQO,OAAO5B,EAAMD,gBAEvBuB,SAMTO,EAAa,IAAIb,IAAa,CAClCC,OAAQ,IAAIC,IACZC,OAAQ,WACNU,EAAWT,YACTpB,EAAMF,SAASjB,KAAI,SAACwC,GAClB,IAAMC,EAAU,IAAIC,IAClB,IAAIC,IAAMlC,YAAW+B,EAAQI,eAiB/B,OAfAH,EAAQI,cAAc,CACpBC,MAAON,EAAQO,OAAO5B,EAAMD,gBAG9BuB,EAAQQ,SACN,IAAIC,IAAM,CACRC,KAAM,IAAIC,IAAK,CACbC,KAAM,iBACNC,KAAM,IAAIC,IAAK,CAAEC,MAAO,SACxBC,OAAQ,IAAIC,IAAO,CAAEF,MAAO,SAC5BL,KAAMX,EAAQO,OAAO5B,EAAMD,cAAcyC,WACzCC,UAAU,OAITnB,SAMfzC,EAAIG,QAAQ0D,SACV,IAAIC,IAAa,CACfjD,OAAQqB,EACR6B,OAAQ,SAACtB,GACP,OAAsC,GAA9BA,EAAQuB,IAAI,SAAW,MAEjCC,KAAM,IACNC,OAAQ,OAIZlE,EAAIG,QAAQ0D,SACV,IAAIM,IAAY,CACdtD,OAAQmC,QAIb,CAAC7B,IAEJ,IAAMiD,EAAqB,SAACC,GACtBA,IAASlD,EAAMD,cACjBE,GAAS,SAACkD,GAAD,mBAAC,eAAYA,GAAb,IAAgBpD,aAAcmD,QAI3C,OACE,sBAAKE,UAAU,MAAf,UACE,qBAAKC,GAAG,MAAMD,UAAU,QACxB,sBAAKC,GAAG,eAAR,UACE,cAACC,EAAA,EAAD,CACEjB,MAA8B,SAAvBrC,EAAMD,aAA0B,UAAY,UACnDwD,QAAQ,YACRC,QAAS,kBAAMP,EAAmB,SAHpC,gBAOA,cAACK,EAAA,EAAD,CACEjB,MAA8B,SAAvBrC,EAAMD,aAA0B,UAAY,UACnDwD,QAAQ,YACRC,QAAS,kBAAMP,EAAmB,SAHpC,gBAOA,cAACK,EAAA,EAAD,CACEjB,MAA8B,WAAvBrC,EAAMD,aAA4B,UAAY,UACrDwD,QAAQ,YACRC,QAAS,kBAAMP,EAAmB,WAHpC,2BCrJOQ,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBpD,MAAK,YAAkD,IAA/CqD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f8ae5dc0.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport TileLayer from \"ol/layer/Tile\";\nimport HeatMapLayer from \"ol/layer/Heatmap\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport OSM from \"ol/source/OSM\";\nimport VectorSource from \"ol/source/Vector\";\nimport { fromLonLat } from \"ol/proj\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport axios from \"axios\";\nimport Point from \"ol/geom/Point\";\nimport { Feature } from \"ol\";\nimport Style from \"ol/style/Style\";\nimport Text from \"ol/style/Text\";\nimport Fill from \"ol/style/Fill\";\nimport Stroke from \"ol/style/Stroke\";\n\nimport { Button } from \"@material-ui/core\";\n\nimport { Fuel, Station } from \"./types\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const map = useRef({} as Map);\n\n  useEffect(() => {\n    map.current = new Map({\n      target: \"map\",\n      view: new View({\n        center: fromLonLat([24.75, 60.2]),\n        zoom: 12.5,\n      }),\n      layers: [\n        new TileLayer({\n          source: new OSM(),\n        }),\n      ],\n    });\n  }, []);\n\n  const [state, setState] = useState<{\n    loading: Boolean;\n    stations: Station[];\n    selectedFuel: Fuel;\n  }>({\n    loading: true,\n    stations: [],\n    selectedFuel: \"Ysi5\",\n  });\n\n  // Fetch station data once on page load and never after that\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: `${process.env.REACT_APP_API_URL}/stations`,\n      headers: {\n        \"x-api-key\": process.env.REACT_APP_API_KEY,\n      },\n    }).then((res: any) =>\n      setState((state) => ({ ...state, loading: false, stations: res.data }))\n    );\n  }, []);\n\n  useEffect(() => {\n    if (!state.loading) {\n      map.current.getLayers().forEach((layer, i) => {\n        // Do not remove base map layer\n        if (i !== 0) {\n          map.current.removeLayer(layer);\n        }\n      });\n\n      const heatmapSource = new VectorSource({\n        format: new GeoJSON(),\n        loader: () => {\n          heatmapSource.addFeatures(\n            state.stations.map((station) => {\n              const feature = new Feature(\n                new Point(fromLonLat(station.coordinates))\n              );\n              feature.setProperties({\n                value: station.prices[state.selectedFuel],\n              });\n              return feature;\n            })\n          );\n        },\n      });\n\n      const textSource = new VectorSource({\n        format: new GeoJSON(),\n        loader: () => {\n          textSource.addFeatures(\n            state.stations.map((station) => {\n              const feature = new Feature(\n                new Point(fromLonLat(station.coordinates))\n              );\n              feature.setProperties({\n                value: station.prices[state.selectedFuel],\n              });\n\n              feature.setStyle(\n                new Style({\n                  text: new Text({\n                    font: \"20px Helvetica\",\n                    fill: new Fill({ color: \"#fff\" }),\n                    stroke: new Stroke({ color: \"#000\" }),\n                    text: station.prices[state.selectedFuel].toString(),\n                    overflow: true,\n                  }),\n                })\n              );\n              return feature;\n            })\n          );\n        },\n      });\n\n      map.current.addLayer(\n        new HeatMapLayer({\n          source: heatmapSource,\n          weight: (feature) => {\n            return (feature.get(\"value\") - 1.4) * 3;\n          },\n          blur: 250,\n          radius: 125,\n        })\n      );\n\n      map.current.addLayer(\n        new VectorLayer({\n          source: textSource,\n        })\n      );\n    }\n  }, [state]);\n\n  const updateSelectedFuel = (fuel: Fuel) => {\n    if (fuel !== state.selectedFuel) {\n      setState((s) => ({ ...s, selectedFuel: fuel }));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"map\" className=\"map\" />\n      <div id=\"fuelSelector\">\n        <Button\n          color={state.selectedFuel === \"Ysi5\" ? \"primary\" : \"default\"}\n          variant=\"contained\"\n          onClick={() => updateSelectedFuel(\"Ysi5\")}\n        >\n          95\n        </Button>\n        <Button\n          color={state.selectedFuel === \"Ysi8\" ? \"primary\" : \"default\"}\n          variant=\"contained\"\n          onClick={() => updateSelectedFuel(\"Ysi8\")}\n        >\n          98\n        </Button>\n        <Button\n          color={state.selectedFuel === \"Diesel\" ? \"primary\" : \"default\"}\n          variant=\"contained\"\n          onClick={() => updateSelectedFuel(\"Diesel\")}\n        >\n          Diesel\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}