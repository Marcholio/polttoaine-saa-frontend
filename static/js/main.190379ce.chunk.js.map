{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["data","coordinates","value","heatmapSource","VectorSource","format","GeoJSON","loader","addFeatures","map","station","feature","Feature","Point","fromLonLat","setProperties","textSource","setStyle","Style","text","Text","font","fill","Fill","color","stroke","Stroke","toString","overflow","setTimeout","Map","target","view","View","center","zoom","layers","TileLayer","source","OSM","HeatMapLayer","weight","get","blur","radius","VectorLayer","App","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oXAoBMA,EAAmD,CACvD,CACEC,YAAa,CAAC,UAAW,WACzBC,MAAO,OAET,CACED,YAAa,CAAC,SAAU,UACxBC,MAAO,QAILC,EAAgB,IAAIC,IAAa,CACrCC,OAAQ,IAAIC,IACZC,OAAQ,WACNJ,EAAcK,YACZR,EAAKS,KAAI,SAACC,GACR,IAAMC,EAAU,IAAIC,IAAQ,IAAIC,IAAMC,YAAWJ,EAAQT,eAEzD,OADAU,EAAQI,cAAc,CAAEb,MAAOQ,EAAQR,QAChCS,SAMTK,EAAa,IAAIZ,IAAa,CAClCC,OAAQ,IAAIC,IACZC,OAAQ,WACNS,EAAWR,YACTR,EAAKS,KAAI,SAACC,GACR,IAAMC,EAAU,IAAIC,IAAQ,IAAIC,IAAMC,YAAWJ,EAAQT,eAczD,OAbAU,EAAQI,cAAc,CAAEb,MAAOQ,EAAQR,QAEvCS,EAAQM,SACN,IAAIC,IAAM,CACRC,KAAM,IAAIC,IAAK,CACbC,KAAM,iBACNC,KAAM,IAAIC,IAAK,CAAEC,MAAO,SACxBC,OAAQ,IAAIC,IAAO,CAAEF,MAAO,SAC5BL,KAAMT,EAAQR,MAAMyB,WACpBC,UAAU,OAITjB,SAMfkB,YAAW,WACT,IAAIC,IAAI,CACNC,OAAQ,MACRC,KAAM,IAAIC,IAAK,CACbC,OAAQpB,YAAW,CAAC,MAAO,OAC3BqB,KAAM,OAERC,OAAQ,CACN,IAAIC,IAAU,CACZC,OAAQ,IAAIC,MAEd,IAAIC,IAAa,CACfF,OAAQnC,EACRsC,OAAQ,SAAC9B,GACP,OAAoC,GAA5BA,EAAQ+B,IAAI,SAAW,IAEjCC,KAAM,GACNC,OAAQ,KAEV,IAAIC,IAAY,CACdP,OAAQtB,SAIb,KAEH,IAQe8B,EARH,WACV,OACE,qBAAKC,UAAU,MAAf,SACE,qBAAKC,GAAG,MAAMD,UAAU,WCpFfE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.190379ce.chunk.js","sourcesContent":["import React from \"react\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport TileLayer from \"ol/layer/Tile\";\nimport HeatMapLayer from \"ol/layer/Heatmap\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport OSM from \"ol/source/OSM\";\nimport VectorSource from \"ol/source/Vector\";\nimport { fromLonLat } from \"ol/proj\";\nimport GeoJSON from \"ol/format/GeoJSON\";\n\nimport \"./App.css\";\nimport Point from \"ol/geom/Point\";\nimport { Feature } from \"ol\";\nimport Style from \"ol/style/Style\";\nimport Text from \"ol/style/Text\";\nimport Fill from \"ol/style/Fill\";\nimport Stroke from \"ol/style/Stroke\";\n\n// TODO: Fetch data from API\nconst data: { coordinates: number[]; value: number }[] = [\n  {\n    coordinates: [24.767956, 60.205239], // Neste Mankkaa Sinikalliontie\n    value: 1.669,\n  },\n  {\n    coordinates: [24.74858, 60.20757], // ABC Nihtisilta\n    value: 1.194,\n  },\n];\n\nconst heatmapSource = new VectorSource({\n  format: new GeoJSON(),\n  loader: () => {\n    heatmapSource.addFeatures(\n      data.map((station) => {\n        const feature = new Feature(new Point(fromLonLat(station.coordinates)));\n        feature.setProperties({ value: station.value });\n        return feature;\n      })\n    );\n  },\n});\n\nconst textSource = new VectorSource({\n  format: new GeoJSON(),\n  loader: () => {\n    textSource.addFeatures(\n      data.map((station) => {\n        const feature = new Feature(new Point(fromLonLat(station.coordinates)));\n        feature.setProperties({ value: station.value });\n\n        feature.setStyle(\n          new Style({\n            text: new Text({\n              font: \"20px Helvetica\",\n              fill: new Fill({ color: \"#fff\" }),\n              stroke: new Stroke({ color: \"#000\" }),\n              text: station.value.toString(),\n              overflow: true,\n            }),\n          })\n        );\n        return feature;\n      })\n    );\n  },\n});\n\nsetTimeout(() => {\n  new Map({\n    target: \"map\",\n    view: new View({\n      center: fromLonLat([24.65, 60.2]),\n      zoom: 12.5,\n    }),\n    layers: [\n      new TileLayer({\n        source: new OSM(),\n      }),\n      new HeatMapLayer({\n        source: heatmapSource,\n        weight: (feature) => {\n          return (feature.get(\"value\") - 1) * 2; // TODO: Create proper scaling function\n        },\n        blur: 25,\n        radius: 50,\n      }),\n      new VectorLayer({\n        source: textSource,\n      }),\n    ],\n  });\n}, 1000);\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div id=\"map\" className=\"map\" />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}