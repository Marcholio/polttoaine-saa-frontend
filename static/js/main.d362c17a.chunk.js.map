{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","loading","stations","state","setState","useEffect","axios","method","url","process","headers","then","res","data","console","log","heatmapSource","VectorSource","format","GeoJSON","loader","addFeatures","map","station","feature","Feature","Point","fromLonLat","coordinates","setProperties","value","prices","Ysi5","textSource","setStyle","Style","text","Text","font","fill","Fill","color","stroke","Stroke","toString","overflow","Map","target","view","View","center","zoom","layers","TileLayer","source","OSM","HeatMapLayer","weight","get","blur","radius","VectorLayer","className","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+YAuHeA,EAjGH,WAAO,IAAD,EACUC,mBAGvB,CACDC,SAAS,EACTC,SAAU,KANI,mBACTC,EADS,KACFC,EADE,KA0FhB,OAjFAC,qBAAU,WACRC,IAAM,CACJC,OAAQ,MACRC,IAAI,GAAD,OAAKC,gEAAL,aACHC,QAAS,CACP,YAAaD,8CAEdE,MAAK,SAACC,GAAD,OAAcR,EAAS,CAAEF,SAAUU,EAAIC,KAAMZ,SAAS,SAC7D,IAEHI,qBAAU,WACR,IAAKF,EAAMF,QAAS,CAClBa,QAAQC,IAAIZ,EAAMD,UAClB,IAAMc,EAAgB,IAAIC,IAAa,CACrCC,OAAQ,IAAIC,IACZC,OAAQ,WACNJ,EAAcK,YACZlB,EAAMD,SAASoB,KAAI,SAACC,GAClB,IAAMC,EAAU,IAAIC,IAClB,IAAIC,IAAMC,YAAWJ,EAAQK,eAG/B,OADAJ,EAAQK,cAAc,CAAEC,MAAOP,EAAQQ,OAAOC,OACvCR,SAMTS,EAAa,IAAIhB,IAAa,CAClCC,OAAQ,IAAIC,IACZC,OAAQ,WACNa,EAAWZ,YACTlB,EAAMD,SAASoB,KAAI,SAACC,GAClB,IAAMC,EAAU,IAAIC,IAClB,IAAIC,IAAMC,YAAWJ,EAAQK,eAe/B,OAbAJ,EAAQK,cAAc,CAAEC,MAAOP,EAAQQ,OAAOC,OAE9CR,EAAQU,SACN,IAAIC,IAAM,CACRC,KAAM,IAAIC,IAAK,CACbC,KAAM,iBACNC,KAAM,IAAIC,IAAK,CAAEC,MAAO,SACxBC,OAAQ,IAAIC,IAAO,CAAEF,MAAO,SAC5BL,KAAMb,EAAQQ,OAAOC,KAAKY,WAC1BC,UAAU,OAITrB,SAMf,IAAIsB,IAAI,CACNC,OAAQ,MACRC,KAAM,IAAIC,IAAK,CACbC,OAAQvB,YAAW,CAAC,MAAO,OAC3BwB,KAAM,OAERC,OAAQ,CACN,IAAIC,IAAU,CACZC,OAAQ,IAAIC,MAEd,IAAIC,IAAa,CACfF,OAAQtC,EACRyC,OAAQ,SAACjC,GACP,OAAsC,GAA9BA,EAAQkC,IAAI,SAAW,MAEjCC,KAAM,IACNC,OAAQ,MAEV,IAAIC,IAAY,CACdP,OAAQrB,UAKf,CAAC9B,IAGF,qBAAK2D,UAAU,MAAf,SACE,qBAAKC,GAAG,MAAMD,UAAU,WCpGfE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBvD,MAAK,YAAkD,IAA/CwD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d362c17a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\nimport TileLayer from \"ol/layer/Tile\";\nimport HeatMapLayer from \"ol/layer/Heatmap\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport OSM from \"ol/source/OSM\";\nimport VectorSource from \"ol/source/Vector\";\nimport { fromLonLat } from \"ol/proj\";\nimport GeoJSON from \"ol/format/GeoJSON\";\nimport axios from \"axios\";\nimport Point from \"ol/geom/Point\";\nimport { Feature } from \"ol\";\nimport Style from \"ol/style/Style\";\nimport Text from \"ol/style/Text\";\nimport Fill from \"ol/style/Fill\";\nimport Stroke from \"ol/style/Stroke\";\n\nimport { Station } from \"./types\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [state, setState] = useState<{\n    loading: Boolean;\n    stations: Station[];\n  }>({\n    loading: true,\n    stations: [],\n  });\n\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: `${process.env.REACT_APP_API_URL}/stations`,\n      headers: {\n        \"x-api-key\": process.env.REACT_APP_API_KEY,\n      },\n    }).then((res: any) => setState({ stations: res.data, loading: false }));\n  }, []);\n\n  useEffect(() => {\n    if (!state.loading) {\n      console.log(state.stations);\n      const heatmapSource = new VectorSource({\n        format: new GeoJSON(),\n        loader: () => {\n          heatmapSource.addFeatures(\n            state.stations.map((station) => {\n              const feature = new Feature(\n                new Point(fromLonLat(station.coordinates))\n              );\n              feature.setProperties({ value: station.prices.Ysi5 });\n              return feature;\n            })\n          );\n        },\n      });\n\n      const textSource = new VectorSource({\n        format: new GeoJSON(),\n        loader: () => {\n          textSource.addFeatures(\n            state.stations.map((station) => {\n              const feature = new Feature(\n                new Point(fromLonLat(station.coordinates))\n              );\n              feature.setProperties({ value: station.prices.Ysi5 });\n\n              feature.setStyle(\n                new Style({\n                  text: new Text({\n                    font: \"20px Helvetica\",\n                    fill: new Fill({ color: \"#fff\" }),\n                    stroke: new Stroke({ color: \"#000\" }),\n                    text: station.prices.Ysi5.toString(),\n                    overflow: true,\n                  }),\n                })\n              );\n              return feature;\n            })\n          );\n        },\n      });\n\n      new Map({\n        target: \"map\",\n        view: new View({\n          center: fromLonLat([24.65, 60.2]),\n          zoom: 12.5,\n        }),\n        layers: [\n          new TileLayer({\n            source: new OSM(),\n          }),\n          new HeatMapLayer({\n            source: heatmapSource,\n            weight: (feature) => {\n              return (feature.get(\"value\") - 1.4) * 3;\n            },\n            blur: 250,\n            radius: 125,\n          }),\n          new VectorLayer({\n            source: textSource,\n          }),\n        ],\n      });\n    }\n  }, [state]);\n\n  return (\n    <div className=\"App\">\n      <div id=\"map\" className=\"map\" />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}