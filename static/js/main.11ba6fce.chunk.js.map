{"version":3,"sources":["constants.ts","components/FuelSelector.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FUELS","Ysi5","Ysi8","Diesel","fuelSelector","props","id","Object","keys","map","fuel","Button","color","selectedFuel","variant","onClick","updateSelectedFuel","createPointFeatures","stations","station","feature","Feature","Point","fromLonLat","coordinates","setProperties","value","prices","App","useRef","useEffect","current","Map","target","view","View","center","zoom","layers","TileLayer","source","OSM","useState","loading","state","setState","axios","method","url","process","headers","then","res","data","getLayers","forEach","layer","i","removeLayer","heatmapSource","VectorSource","format","GeoJSON","loader","addFeatures","addLayer","HeatMapLayer","weight","get","scaleValue","blur","radius","textSource","features","feat","setStyle","Style","text","Text","font","fill","Fill","stroke","Stroke","toString","overflow","createTextFeatures","VectorLayer","className","FuelSelector","s","href","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mZAEaA,EAAmC,CAC9CC,KAAM,KACNC,KAAM,KACNC,OAAQ,U,QCkBKC,EAlBM,SAACC,GAAD,OAInB,qBAAKC,GAAG,eAAR,SACGC,OAAOC,KAAKR,GAAOS,KAAI,SAACC,GAAD,OACtB,cAACC,EAAA,EAAD,CAEEC,MAAOP,EAAMQ,eAAiBH,EAAO,UAAY,UACjDI,QAAQ,YACRC,QAAS,kBAAMV,EAAMW,mBAAmBN,IAJ1C,SAMGV,EAAMU,IALFA,SCoBPO,G,OAAsB,SAC1BC,EACAL,GAF0B,OAI1BK,EAAST,KAAI,SAACU,GACZ,IAAMC,EAAU,IAAIC,IAAQ,IAAIC,IAAMC,YAAWJ,EAAQK,eAIzD,OAHAJ,EAAQK,cAAc,CACpBC,MAAOP,EAAQQ,OAAOd,KAEjBO,OAgJIQ,EAtHH,WACV,IAAMnB,EAAMoB,iBAAO,IAGnBC,qBAAU,WACRrB,EAAIsB,QAAU,IAAIC,IAAI,CACpBC,OAAQ,MACRC,KAAM,IAAIC,IAAK,CACbC,OAAQb,YAAW,CAAC,MAAO,OAC3Bc,KAAM,OAERC,OAAQ,CACN,IAAIC,IAAU,CACZC,OAAQ,IAAIC,WAIjB,IAjBa,MAmBUC,mBAIvB,CACDC,SAAS,EACTzB,SAAU,GACVL,aAAc,SA1BA,mBAmBT+B,EAnBS,KAmBFC,EAnBE,KA8BhBf,qBAAU,WACRgB,IAAM,CACJC,OAAQ,MACRC,IAAI,GAAD,OAAKC,gEAAL,aACHC,QAAS,CACP,YAAaD,8CAEdE,MAAK,SAACC,GAAD,OACNP,GAAS,SAACD,GAAD,mBAAC,eAAgBA,GAAjB,IAAwBD,SAAS,EAAOzB,SAAUkC,EAAIC,eAEhE,IAGHvB,qBAAU,WACR,IAAKc,EAAMD,QAAS,CAElBlC,EAAIsB,QAAQuB,YAAYC,SAAQ,SAACC,EAAOC,GAE5B,IAANA,GACFhD,EAAIsB,QAAQ2B,YAAYF,MAK5B,IAAMG,EAAgB,IAAIC,IAAa,CACrCC,OAAQ,IAAIC,IACZC,OAAQ,WACNJ,EAAcK,YACZ/C,EAAoB2B,EAAM1B,SAAU0B,EAAM/B,kBAKhDJ,EAAIsB,QAAQkC,SACV,IAAIC,IAAa,CACf1B,OAAQmB,EACRQ,OAAQ,SAAC/C,GAAD,OArEC,SAACA,EAA4BP,GAA7B,OACkD,IAAlEO,EAAQgD,IAAI,UAA6B,WAAjBvD,EAA4B,IAAM,MAoE9BwD,CAAWjD,EAASwB,EAAM/B,eAC/CyD,KAAM,IACNC,OAAQ,OAKZ,IAAMC,EAAa,IAAIZ,IAAa,CAClCC,OAAQ,IAAIC,IACZC,OAAQ,WACNS,EAAWR,YAnGM,SAAC9C,EAAqBL,GAC/C,IAAM4D,EAAWxD,EAAoBC,EAAUL,GAgB/C,OAdA4D,EAASlB,SAAQ,SAACmB,GAAD,OACfA,EAAKC,SACH,IAAIC,IAAM,CACRC,KAAM,IAAIC,IAAK,CACbC,KAAM,iBACNC,KAAM,IAAIC,IAAK,CAAErE,MAAO,SACxBsE,OAAQ,IAAIC,IAAO,CAAEvE,MAAO,SAC5BiE,KAAMH,EAAKN,IAAI,SAASgB,WACxBC,UAAU,UAMXZ,EAmFGa,CAAmB1C,EAAM1B,SAAU0B,EAAM/B,kBAK/CJ,EAAIsB,QAAQkC,SACV,IAAIsB,IAAY,CACd/C,OAAQgC,QAIb,CAAC5B,IAQJ,OACE,sBAAK4C,UAAU,MAAf,UACE,qBAAKlF,GAAG,MAAMkF,UAAU,QACxB,cAACC,EAAD,CACEzE,mBAVqB,SAACN,GACtBA,IAASkC,EAAM/B,cACjBgC,GAAS,SAAC6C,GAAD,mBAAC,eAAYA,GAAb,IAAgB7E,aAAcH,QASrCG,aAAc+B,EAAM/B,eAEtB,sBAAKP,GAAG,YAAR,UACE,kEACA,mBACEA,GAAG,aACHqF,KAAK,uDACL1D,OAAO,SACP2D,IAAI,aAJN,gCC9JOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.11ba6fce.chunk.js","sourcesContent":["import { Fuel } from \"./types\";\n\nexport const FUELS: { [key in Fuel]: string } = {\n  Ysi5: \"95\",\n  Ysi8: \"98\",\n  Diesel: \"Diesel\",\n};\n","import { Button } from \"@material-ui/core\";\nimport { FUELS } from \"../constants\";\n\nimport { Fuel } from \"../types\";\n\nconst fuelSelector = (props: {\n  selectedFuel: Fuel;\n  updateSelectedFuel: (fuel: Fuel) => void;\n}) => (\n  <div id=\"fuelSelector\">\n    {Object.keys(FUELS).map((fuel: string) => (\n      <Button\n        key={fuel as string}\n        color={props.selectedFuel === fuel ? \"primary\" : \"default\"}\n        variant=\"contained\"\n        onClick={() => props.updateSelectedFuel(fuel as Fuel)}\n      >\n        {FUELS[fuel as Fuel]}\n      </Button>\n    ))}\n  </div>\n);\n\nexport default fuelSelector;\n","import React, { useEffect, useState, useRef } from \"react\";\n\nimport Map from \"ol/Map\";\nimport View from \"ol/View\";\n\nimport TileLayer from \"ol/layer/Tile\";\nimport HeatMapLayer from \"ol/layer/Heatmap\";\nimport VectorLayer from \"ol/layer/Vector\";\n\nimport OSM from \"ol/source/OSM\";\nimport VectorSource from \"ol/source/Vector\";\n\nimport { fromLonLat } from \"ol/proj\";\nimport GeoJSON from \"ol/format/GeoJSON\";\n\nimport Feature from \"ol/Feature\";\nimport Point from \"ol/geom/Point\";\nimport Geometry from \"ol/geom/Geometry\";\n\nimport Style from \"ol/style/Style\";\nimport Text from \"ol/style/Text\";\nimport Fill from \"ol/style/Fill\";\nimport Stroke from \"ol/style/Stroke\";\n\nimport axios from \"axios\";\n\nimport FuelSelector from \"./components/FuelSelector\";\n\nimport { Fuel, Station } from \"./types\";\n\nimport \"./App.css\";\n\nconst createPointFeatures = (\n  stations: Station[],\n  selectedFuel: Fuel\n): Feature<Point>[] =>\n  stations.map((station) => {\n    const feature = new Feature(new Point(fromLonLat(station.coordinates)));\n    feature.setProperties({\n      value: station.prices[selectedFuel],\n    });\n    return feature;\n  });\n\nconst createTextFeatures = (stations: Station[], selectedFuel: Fuel) => {\n  const features = createPointFeatures(stations, selectedFuel);\n\n  features.forEach((feat) =>\n    feat.setStyle(\n      new Style({\n        text: new Text({\n          font: \"20px Helvetica\",\n          fill: new Fill({ color: \"#fff\" }),\n          stroke: new Stroke({ color: \"#000\" }),\n          text: feat.get(\"value\").toString(),\n          overflow: true,\n        }),\n      })\n    )\n  );\n\n  return features;\n};\n\nconst scaleValue = (feature: Feature<Geometry>, selectedFuel: Fuel): number =>\n  (feature.get(\"value\") - (selectedFuel === \"Diesel\" ? 1.4 : 1.5)) * 10;\n\nconst App = () => {\n  const map = useRef({} as Map);\n\n  // Initialize map with base layer\n  useEffect(() => {\n    map.current = new Map({\n      target: \"map\",\n      view: new View({\n        center: fromLonLat([24.75, 60.2]),\n        zoom: 12.5,\n      }),\n      layers: [\n        new TileLayer({\n          source: new OSM(),\n        }),\n      ],\n    });\n  }, []);\n\n  const [state, setState] = useState<{\n    loading: Boolean;\n    stations: Station[];\n    selectedFuel: Fuel;\n  }>({\n    loading: true,\n    stations: [],\n    selectedFuel: \"Ysi5\",\n  });\n\n  // Fetch station data once on page load and never after that\n  useEffect(() => {\n    axios({\n      method: \"get\",\n      url: `${process.env.REACT_APP_API_URL}/stations`,\n      headers: {\n        \"x-api-key\": process.env.REACT_APP_API_KEY,\n      },\n    }).then((res: any) =>\n      setState((state) => ({ ...state, loading: false, stations: res.data }))\n    );\n  }, []);\n\n  // Update map layers\n  useEffect(() => {\n    if (!state.loading) {\n      // Clear layers\n      map.current.getLayers().forEach((layer, i) => {\n        // Do not remove base map layer\n        if (i !== 0) {\n          map.current.removeLayer(layer);\n        }\n      });\n\n      // HEATMAP LAYER\n      const heatmapSource = new VectorSource({\n        format: new GeoJSON(),\n        loader: () => {\n          heatmapSource.addFeatures(\n            createPointFeatures(state.stations, state.selectedFuel)\n          );\n        },\n      });\n\n      map.current.addLayer(\n        new HeatMapLayer({\n          source: heatmapSource,\n          weight: (feature) => scaleValue(feature, state.selectedFuel),\n          blur: 250,\n          radius: 125,\n        })\n      );\n\n      // TEXT LAYER\n      const textSource = new VectorSource({\n        format: new GeoJSON(),\n        loader: () => {\n          textSource.addFeatures(\n            createTextFeatures(state.stations, state.selectedFuel)\n          );\n        },\n      });\n\n      map.current.addLayer(\n        new VectorLayer({\n          source: textSource,\n        })\n      );\n    }\n  }, [state]);\n\n  const updateSelectedFuel = (fuel: Fuel) => {\n    if (fuel !== state.selectedFuel) {\n      setState((s) => ({ ...s, selectedFuel: fuel }));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"map\" className=\"map\" />\n      <FuelSelector\n        updateSelectedFuel={updateSelectedFuel}\n        selectedFuel={state.selectedFuel}\n      />\n      <div id=\"createdby\">\n        <span>Created by Markus Tyrkk√∂ - </span>\n        <a\n          id=\"sourcecode\"\n          href=\"https://github.com/Marcholio/polttoaine-saa-frontend\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Source code\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}